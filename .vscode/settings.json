// Plik: app/grywalizacja/page.tsx

import styles from '../../styles/Grywalizacja.module.css';
import IndividualRanking from './IndividualRanking';
import TeamRankings from './TeamRankings';
import SeasonSelector from './SeasonSelector';
import { createServerComponentClient } from '@supabase/ssr';
import { cookies } from 'next/headers';

// Deklaracja typów przeniesiona tutaj dla przejrzystości
interface ProfileForRanking {
    id: string;
    username: string;
    total_points: number;
    rank: string;
    team: string | null;
}

function groupProfilesByTeam(profiles: ProfileForRanking[]) {
    const teamsMap = new Map<string, { members: ProfileForRanking[], totalPoints: number }>();
    profiles.forEach(profile => {
        const teamName = profile.team || 'Bez drużyny';
        if (!teamsMap.has(teamName)) {
            teamsMap.set(teamName, { members: [], totalPoints: 0 });
        }
        const team = teamsMap.get(teamName)!;
        team.members.push(profile);
        team.totalPoints += profile.total_points;
    });
    const finalTeams = new Map<string, { members: ProfileForRanking[], average: number }>();
    teamsMap.forEach((value, key) => {
        finalTeams.set(key, {
            members: value.members,
            average: value.members.length > 0 ? value.totalPoints / value.members.length : 0,
        });
    });
    return finalTeams;
}


const GrywalizacjaPage = async ({ searchParams }: {
  // eslint-disable-next-line @typescript-eslint/no-empty-object-type
  params: {}; // Dodajemy komentarz, aby wyłączyć błąd lintera
  searchParams: { [key:string]: string | string[] | undefined };
}) => {
    const cookieStore = cookies();
    const supabase = createServerComponentClient({ cookies: () => cookieStore });
    
    const selectedSeasonId = Array.isArray(searchParams.season)
        ? searchParams.season[0]
        : searchParams.season;

    try {
        const { data: allSeasons, error: seasonsError } = await supabase
            .from('seasons')
            .select('id, name, is_active')
            .order('id', { ascending: false });

        if (seasonsError) throw seasonsError;

        const activeSeason = allSeasons.find(s => s.is_active) || null;
        const completedSeasons = allSeasons.filter(s => !s.is_active);

        let profiles: ProfileForRanking[] = [];
        let pageTitle = "Ranking Sezonu";

        if (selectedSeasonId) {
            const selectedSeason = allSeasons.find(s => s.id.toString() === selectedSeasonId);
            pageTitle = `Ranking: ${selectedSeason?.name || 'Sezon Historyczny'}`;

            const { data: historicalData, error } = await supabase
                .from('season_results')
                .select('final_points, final_rank, team, profiles (id, username)')
                .eq('season_id', selectedSeasonId)
                .order('final_points', { ascending: false });

            if (error || !historicalData) throw error || new Error("Brak danych historycznych.");

            profiles = historicalData.map(result => ({
                id: result.profiles!.id,
                username: result.profiles!.username,
                total_points: result.final_points,
                rank: result.final_rank || 'Uczestnik',
                team: result.team || null,
            }));
        } else {
            pageTitle = `Ranking: ${activeSeason?.name || 'Bieżący Sezon'}`;
            const { data: currentProfiles, error } = await supabase
                .from('profiles')
                .select('id, username, total_points, rank, team')
                .eq('is_eliminated', false)
                .order('total_points', { ascending: false });

            if (error || !currentProfiles) throw error || new Error("Brak danych bieżących.");
            
            profiles = currentProfiles as ProfileForRanking[];
        }

        const teamsData = groupProfilesByTeam(profiles);

        return (
            <main className={styles.container}>
                <h1 className={styles.title}>{pageTitle}</h1>
                <p className={styles.subtitle}>Zobacz, jak radzą sobie najlepsi zawodnicy i drużyny!</p>
                <SeasonSelector activeSeason={activeSeason} completedSeasons={completedSeasons} />
                {profiles.length > 0 ? (
                    <>
                        <IndividualRanking profiles={profiles} />
                        <TeamRankings teams={teamsData} />
                    </>
                ) : (
                    <div className={styles.rankingContainer}>
                        <p style={{ textAlign: 'center', color: 'var(--text-muted)' }}>Brak danych rankingowych dla wybranego sezonu.</p>
                    </div>
                )}
            </main>
        );

    } catch (error) {
        console.error("Błąd podczas ładowania strony GrywalizacjaPage:", error);
        return (
            <main className={styles.container}>
                <h1 className={styles.title}>Błąd Krytyczny</h1>
                <p>Nie udało się załadować danych rankingu. Skontaktuj się z administratorem.</p>
            </main>
        );
    }
};

export default GrywalizacjaPage;